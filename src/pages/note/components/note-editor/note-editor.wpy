<template>
	<view class="container" :class="{ 'has-tooltip': usingKeyboard }">
		<editor
			id="editor"
			class="ql-container"
			:placeholder="placeholder"
			bindstatuschange="onStatusChange"
			bindready="onEditorReady"
			bindfocus="focus"
			bindblur="blur"
		>
		</editor>
	</view>

	<view
		class="toolbar"
		catchtouchend="format"
		:hidden="keyboardHeight <= 0"
		:style="{ bottom: (isIOS ? keyboardHeight : 0) + 'px' }"
	>
		<i class="iconfont icon-charutupian" catchtouchend="insertImage"></i>
		<i
			class="iconfont icon-format-header-2 {{formats.header === 2 ? 'ql-active' : ''}}"
			data-name="header"
			data-value="{{2}}"
		></i>
		<i
			class="iconfont icon-format-header-3 {{formats.header === 3 ? 'ql-active' : ''}}"
			data-name="header"
			data-value="{{3}}"
		></i>
		<i
			class="iconfont icon-zitijiacu {{formats.bold ? 'ql-active' : ''}}"
			data-name="bold"
		></i>
		<i
			class="iconfont icon-zitixieti {{formats.italic ? 'ql-active' : ''}}"
			data-name="italic"
		></i>
		<i
			class="iconfont icon-zitixiahuaxian {{formats.underline ? 'ql-active' : ''}}"
			data-name="underline"
		></i>
		<i
			class="iconfont icon--checklist"
			data-name="list"
			data-value="check"
		></i>
		<i
			class="iconfont icon-youxupailie {{formats.list === 'ordered' ? 'ql-active' : ''}}"
			data-name="list"
			data-value="ordered"
		></i>
	</view>
</template>

<script>
import wepy from '@wepy/core';

wepy.component({
	name: 'note-editor',
	props: {
		defaultValue: {
			type: String
		}
	},

	/**
	 * Component initial data
	 */
	data: {
		readOnly: false,
		placeholder: '开始笔记',
		usingKeyboard: false,
		focusing: false,
		isIOS: false,
		editorCtx: null
	},

	attached() {
		const platform = wx.getSystemInfoSync().platform;
		this.isIOS = platform === 'ios';
		const that = this;
		this.toggleShowTooltip(0);
		let keyboardHeight = 0;
		wx.onKeyboardHeightChange((res) => {
			if (res.height === keyboardHeight) return;
			const duration = res.height > 0 ? res.duration * 1000 : 0;
			keyboardHeight = res.height;
			setTimeout(() => {
				wx.pageScrollTo({
					scrollTop: 0,
					success() {
						that.toggleShowTooltip(keyboardHeight);
						that.data.editorCtx.scrollIntoView();
					}
				});
			}, duration);
		});
	},

	/**
	 * Component methods
	 */
	methods: {
		readOnlyChange() {
			this.readOnly = !this.readOnly;
		},
		calNavigationBarAndStatusBar() {
			const systemInfo = wx.getSystemInfoSync();
			const { statusBarHeight, platform } = systemInfo;
			const isIOS = platform === 'ios';
			const navigationBarHeight = isIOS ? 44 : 48;
			return statusBarHeight + navigationBarHeight;
		},
		onEditorReady() {
			this.$wx
				.createSelectorQuery()
				.select('#editor')
				.context((res) => {
					this.editorCtx = res.context;
					this.setDefaultValue(this.defaultValue);
				})
				.exec();
		},
		focus() {
			this.focusing = true;
		},
		blur() {
			this.focusing = false;
		},
		format(e) {
			let { name, value } = e.target.dataset;
			if (!name) return;
			this.editorCtx.format(name, value);
		},
		onStatusChange(e) {
			this.formats = e.detail;
		},
		insertDivider() {
			this.editorCtx.insertDivider({
				success: function () {
					console.log('insert divider success');
				}
			});
		},
		clear() {
			this.editorCtx.clear({
				success: function () {
					console.log('clear success');
				}
			});
		},
		removeFormat() {
			this.editorCtx.removeFormat();
		},
		insertDate() {
			const date = new Date();
			const formatDate = `${date.getFullYear()}/${
				date.getMonth() + 1
			}/${date.getDate()}`;
			this.editorCtx.insertText({
				text: formatDate
			});
		},
		insertImage() {
			const that = this;
			wx.chooseImage({
				count: 1,
				success: function (res) {
					that.data.editorCtx.insertImage({
						src: res.tempFilePaths[0],
						data: {
							id: 'abcd',
							role: 'god'
						},
						width: '80%',
						success: function () {
							console.log('insert image success');
						}
					});
				}
			});
		},
		toggleShowTooltip(keyboardHeight) {
			if (!this.focusing) {
				this.usingKeyboard = false;
				return;
			}
			this.usingKeyboard = keyboardHeight > 0;
		},
		setDefaultValue(value) {
			if (!this.editorCtx) {
				return;
			}
			this.editorCtx.setContents({ html: value });
		},
		getContents() {
			return new Promise((resolve) => {
				this.editorCtx.getContents({
					success(editorContents) {
						resolve(editorContents);
					}
				});
			});
		}
	},

	watch: {
		defaultValue(newValue) {
			this.setDefaultValue(newValue);
		}
	}
});
</script>

<style lang="less">
@import '../../../../../static/style/iconfont.wxss';
@import '../../../../../static/style/weui.wxss';

:host {
	display: block;
}

.container {
	height: 100%;
	min-height: 100rpx;
	width: 100%;
}

.container.has-tooltip {
	height: calc(100% - 50px);
}

.ql-container {
	box-sizing: border-box;
	width: 100%;
	height: 100%;
	font-size: 16px;
	line-height: 1.5;
	overflow: auto;
	padding: 10px 10px 20px 10px;
	border: 1px solid #ececec;
}

.ql-active {
	color: #22c704;
}

.iconfont {
	display: inline-block;
	width: 30px;
	height: 30px;
	cursor: pointer;
	font-size: 20px;
}

.toolbar {
	box-sizing: border-box;
	padding: 0 10px;
	height: 50px;
	width: 100%;
	position: fixed;
	left: 0;
	right: 100%;
	bottom: 0;
	display: flex;
	align-items: center;
	justify-content: space-between;
	border: 1px solid #ececec;
	border-left: none;
	border-right: none;
	background-color: #fff;
}
</style>

<config>
  {}
</config>
